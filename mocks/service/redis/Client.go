// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// ACLSetUser provides a mock function with given fields: ip, port, adminUsername, adminPassword, username, permissionSpaces, passwords, permissions
func (_m *Client) ACLSetUser(ip string, port string, adminUsername string, adminPassword string, username string, permissionSpaces []string, passwords []string, permissions []string) error {
	ret := _m.Called(ip, port, adminUsername, adminPassword, username, permissionSpaces, passwords, permissions)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, []string, []string, []string) error); ok {
		r0 = rf(ip, port, adminUsername, adminPassword, username, permissionSpaces, passwords, permissions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUser provides a mock function with given fields: ip, port, adminUsername, adminPassword, username
func (_m *Client) DeleteUser(ip string, port string, adminUsername string, adminPassword string, username string) error {
	ret := _m.Called(ip, port, adminUsername, adminPassword, username)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, string) error); ok {
		r0 = rf(ip, port, adminUsername, adminPassword, username)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetNumberSentinelSlavesInMemory provides a mock function with given fields: ip
func (_m *Client) GetNumberSentinelSlavesInMemory(ip string) (int32, error) {
	ret := _m.Called(ip)

	var r0 int32
	if rf, ok := ret.Get(0).(func(string) int32); ok {
		r0 = rf(ip)
	} else {
		r0 = ret.Get(0).(int32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ip)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNumberSentinelsInMemory provides a mock function with given fields: ip
func (_m *Client) GetNumberSentinelsInMemory(ip string) (int32, error) {
	ret := _m.Called(ip)

	var r0 int32
	if rf, ok := ret.Get(0).(func(string) int32); ok {
		r0 = rf(ip)
	} else {
		r0 = ret.Get(0).(int32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ip)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSentinelMonitor provides a mock function with given fields: ip
func (_m *Client) GetSentinelMonitor(ip string) (string, string, error) {
	ret := _m.Called(ip)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(ip)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(ip)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(ip)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetSlaveOf provides a mock function with given fields: ip, port, username, password
func (_m *Client) GetSlaveOf(ip string, port string, username string, password string) (string, error) {
	ret := _m.Called(ip, port, username, password)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, string, string) string); ok {
		r0 = rf(ip, port, username, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string) error); ok {
		r1 = rf(ip, port, username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsers provides a mock function with given fields: ip, port, username, password
func (_m *Client) GetUsers(ip string, port string, username string, password string) ([]string, error) {
	ret := _m.Called(ip, port, username, password)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string, string, string, string) []string); ok {
		r0 = rf(ip, port, username, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string) error); ok {
		r1 = rf(ip, port, username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsMaster provides a mock function with given fields: ip, port, username, password
func (_m *Client) IsMaster(ip string, port string, username string, password string) (bool, error) {
	ret := _m.Called(ip, port, username, password)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string, string, string) bool); ok {
		r0 = rf(ip, port, username, password)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string) error); ok {
		r1 = rf(ip, port, username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MakeMaster provides a mock function with given fields: ip, port, username, password
func (_m *Client) MakeMaster(ip string, port string, username string, password string) error {
	ret := _m.Called(ip, port, username, password)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string) error); ok {
		r0 = rf(ip, port, username, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MakeSlaveOf provides a mock function with given fields: ip, masterIP, username, password
func (_m *Client) MakeSlaveOf(ip string, masterIP string, username string, password string) error {
	ret := _m.Called(ip, masterIP, username, password)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string) error); ok {
		r0 = rf(ip, masterIP, username, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MakeSlaveOfWithPort provides a mock function with given fields: ip, masterIP, masterPort, username, password
func (_m *Client) MakeSlaveOfWithPort(ip string, masterIP string, masterPort string, username string, password string) error {
	ret := _m.Called(ip, masterIP, masterPort, username, password)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, string) error); ok {
		r0 = rf(ip, masterIP, masterPort, username, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MonitorRedis provides a mock function with given fields: ip, monitor, quorum, username, password
func (_m *Client) MonitorRedis(ip string, monitor string, quorum string, username string, password string) error {
	ret := _m.Called(ip, monitor, quorum, username, password)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, string) error); ok {
		r0 = rf(ip, monitor, quorum, username, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MonitorRedisWithPort provides a mock function with given fields: ip, monitor, port, quorum, username, password
func (_m *Client) MonitorRedisWithPort(ip string, monitor string, port string, quorum string, username string, password string) error {
	ret := _m.Called(ip, monitor, port, quorum, username, password)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, string) error); ok {
		r0 = rf(ip, monitor, port, quorum, username, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ResetSentinel provides a mock function with given fields: ip
func (_m *Client) ResetSentinel(ip string) error {
	ret := _m.Called(ip)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(ip)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetCustomRedisConfig provides a mock function with given fields: ip, port, configs, username, password
func (_m *Client) SetCustomRedisConfig(ip string, port string, configs []string, username string, password string) error {
	ret := _m.Called(ip, port, configs, username, password)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, []string, string, string) error); ok {
		r0 = rf(ip, port, configs, username, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetCustomSentinelConfig provides a mock function with given fields: ip, configs
func (_m *Client) SetCustomSentinelConfig(ip string, configs []string) error {
	ret := _m.Called(ip, configs)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []string) error); ok {
		r0 = rf(ip, configs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SlaveIsReady provides a mock function with given fields: ip, port, username, password
func (_m *Client) SlaveIsReady(ip string, port string, username string, password string) (bool, error) {
	ret := _m.Called(ip, port, username, password)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string, string, string) bool); ok {
		r0 = rf(ip, port, username, password)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string) error); ok {
		r1 = rf(ip, port, username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
